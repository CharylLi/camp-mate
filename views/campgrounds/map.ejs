<%# This EJS initializes a Mapbox map and displays campgrounds on it with clustering and 3D terrain features. %>

    <% layout('layouts/boilerplate') %>

        <div id="map" style="width: 100%; height: 600px;"></div>

        <script>
            mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhcnlsbGkiLCJhIjoiY20xd2d6cWV0MGlicjJpb296dHYxdG4wYiJ9.nChyB_MG3kJR4BdxYs-lWQ';

            const campgrounds = {
                type: "FeatureCollection",
                features: [
            <% for(let campground of campgrounds) { %>
                {
                    type: "Feature",
                    geometry: {
                        type: "Point",
                        coordinates: [<%= campground.geometry.coordinates.join(', ') %>]
                    },
                    properties: {
                        id: "<%= campground._id %>",
                        title: "<%= campground.title %>",
                        location: "<%= campground.location %>",
                        popUpMarkup: `<strong><a href="/campgrounds/<%= campground._id %>"><%= campground.title %></a></strong><p><%= campground.location %></p>`
                    }
                },
            <% } %>
        ]
    };

            // Initialize the Mapbox map with 3D effect
            const map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/light-v11',
                center: [-95.59179687498357, 37.66995747013945],
                zoom: 3.3,
                antialias: true
            });

            map.on('load', function () {
                map.addSource('mapbox-dem', {
                    "type": "raster-dem",
                    "url": "mapbox://mapbox.terrain-rgb",
                    "tileSize": 512,
                    "maxzoom": 14
                });
                map.setTerrain({ "source": "mapbox-dem", "exaggeration": 1.5 });

                map.addLayer({
                    'id': '3d-buildings',
                    'source': 'composite',
                    'source-layer': 'building',
                    'filter': ['==', 'extrude', 'true'],
                    'type': 'fill-extrusion',
                    'minzoom': 15,
                    'paint': {
                        'fill-extrusion-color': '#aaa',
                        'fill-extrusion-height': ['get', 'height'],
                        'fill-extrusion-base': ['get', 'min_height'],
                        'fill-extrusion-opacity': 0.6
                    }
                });

                map.addSource('campgrounds', {
                    type: 'geojson',
                    data: campgrounds,
                    cluster: true,
                    clusterMaxZoom: 14,
                    clusterRadius: 50
                });

                map.addLayer({
                    id: 'clusters',
                    type: 'circle',
                    source: 'campgrounds',
                    filter: ['has', 'point_count'],
                    paint: {
                        'circle-color': ['step', ['get', 'point_count'], '#00BCD4', 2, '#2196F3', 3, '#3F51B5'],
                        'circle-radius': ['step', ['get', 'point_count'], 15, 10, 20, 30, 25]
                    }
                });

                map.addLayer({
                    id: 'cluster-count',
                    type: 'symbol',
                    source: 'campgrounds',
                    filter: ['has', 'point_count'],
                    layout: {
                        'text-field': '{point_count_abbreviated}',
                        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                        'text-size': 12
                    }
                });

                map.addLayer({
                    id: 'unclustered-point',
                    type: 'circle',
                    source: 'campgrounds',
                    filter: ['!', ['has', 'point_count']],
                    paint: {
                        'circle-color': '#11b4da',
                        'circle-radius': 4,
                        'circle-stroke-width': 1,
                        'circle-stroke-color': '#fff'
                    }
                });

                map.on('click', 'clusters', function (e) {
                    const features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
                    const clusterId = features[0].properties.cluster_id;
                    map.getSource('campgrounds').getClusterExpansionZoom(clusterId, function (err, zoom) {
                        if (err) return;
                        map.easeTo({
                            center: features[0].geometry.coordinates,
                            zoom: zoom
                        });
                    });
                });

                map.on('click', 'unclustered-point', function (e) {
                    const { popUpMarkup } = e.features[0].properties;
                    const coordinates = e.features[0].geometry.coordinates.slice();
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }
                    new mapboxgl.Popup()
                        .setLngLat(coordinates)
                        .setHTML(popUpMarkup)
                        .addTo(map);
                });

                map.on('mouseenter', 'clusters', function () {
                    map.getCanvas().style.cursor = 'pointer';
                });
                map.on('mouseleave', 'clusters', function () {
                    map.getCanvas().style.cursor = '';
                });

                map.addControl(new mapboxgl.NavigationControl());
            });
        </script>